# Generated by Django 4.0.4 on 2022-05-22 13:35

import classroom.validators
import datetime
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    dependencies = [
        ("classroom", "0040_assignment"),
    ]

    operations = [
        migrations.AlterField(
            model_name="assignment",
            name="due_time",
            field=models.TimeField(
                default=datetime.time(13, 35, 25, 382904), verbose_name="Due time"
            ),
        ),
        migrations.CreateModel(
            name="SubmittedAssignment",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("answer_section", models.TextField(blank=True, null=True)),
                (
                    "submitted_file",
                    models.FileField(
                        blank=True,
                        max_length=500,
                        null=True,
                        upload_to="classroom/assignment_submissions/",
                        validators=[
                            django.core.validators.FileExtensionValidator(
                                allowed_extensions=["pdf"],
                                message="Please Upload PDF file only",
                            ),
                            classroom.validators.pdf_file_size_lt_5mb,
                        ],
                        verbose_name="Upload File Here📁",
                    ),
                ),
                (
                    "is_submitted",
                    models.BooleanField(default=False, verbose_name="submitted : "),
                ),
                ("submission_date", models.DateField(auto_now_add=True)),
                ("submission_time", models.TimeField(auto_now_add=True)),
                (
                    "score",
                    models.IntegerField(
                        default=0,
                        validators=[
                            django.core.validators.MinValueValidator(
                                0, "Score should be >= 0"
                            ),
                            django.core.validators.MaxValueValidator(
                                100, "score should be <= 100"
                            ),
                        ],
                        verbose_name="0<=x<=100",
                    ),
                ),
                (
                    "has_scored",
                    models.BooleanField(
                        default=False, verbose_name="Scored by teacher : "
                    ),
                ),
                (
                    "remarks",
                    models.TextField(
                        blank=True, max_length=400, null=True, verbose_name="remarks"
                    ),
                ),
                (
                    "assignment",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="submissions",
                        to="classroom.assignment",
                    ),
                ),
                (
                    "scored_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="scored_assignments",
                        to="classroom.teacher",
                    ),
                ),
                (
                    "submitted_by",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="attempted_assignments",
                        to="classroom.student",
                    ),
                ),
            ],
            options={
                "ordering": ["-submission_date", "-submission_time", "-score"],
                "unique_together": {("assignment", "submitted_by")},
            },
        ),
    ]
