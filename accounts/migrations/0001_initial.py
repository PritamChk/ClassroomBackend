# Generated by Django 4.0.4 on 2022-04-26 19:56

import django.core.validators
from django.db import migrations, models
import django.utils.timezone
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='BaseAccount',
            fields=[
                ('id', models.UUIDField(auto_created=True, default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('first_name', models.CharField(max_length=200)),
                ('last_name', models.CharField(max_length=200)),
                ('contact_no', models.CharField(blank=True, db_index=True, help_text='\n            üëåüèªE.g - 9881284481\n            ‚ùå +91 9812300122\n            ‚ùå 09812300122\n        ', max_length=15, null=True, unique=True, validators=[django.core.validators.RegexValidator('^\\d{10}$', 'Phone no should contain 10 digits')], verbose_name='Phone No(without country code or 0)')),
                ('email', models.EmailField(help_text='This will be used as username for login', max_length=350, unique=True, verbose_name='Email Id')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates whether the user can edit everything into this admin site.', verbose_name='admin status')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'User',
                'verbose_name_plural': 'Users',
                'ordering': ['first_name', 'last_name'],
            },
        ),
    ]
